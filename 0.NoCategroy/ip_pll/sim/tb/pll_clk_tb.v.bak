// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "07/24/2023 19:18:12"
                                                                                
// Verilog Test Bench template for design : t5
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
                                                                  
module ip_pll_tb ();
    // constants                                           
	// general purpose registers

	// test vector input registers
	parameter T = 20;
	reg clk;
	// assign statements (if any)                          
	reg sys_clk;
        reg sys_rst_n;

	wire clk_out100m;
	wire clk_out100m_180deg; 
	wire clk_out50m;
	wire clk_out25m;

	initial begin
		sys_clk = 1'b0;
        sys_rst_n = 1'b0;
        #(T + 1) sys_rst_n = 1'b1;
	end
	
    wire rst_n;
    wire locked;

	always begin
        #(T/2) sys_clk = ~sys_clk;
    end

    //! PLL reset signal
    assign rst_n = sys_rst_n & locked;

    pll_clk	pll_clk_inst (
	.areset ( ~sys_rst_n ),
	.inclk0 ( sys_clk ),
	.c0 ( clk_out100m ),
	.c1 ( clk_out100m_180deg ),
	.c2 ( clk_out50m ),
	.c3 ( clk_out25m ),
	.locked ( locked )
	);


	// ! segment LED
    reg [7:0] seg_led;
    reg [5:0] seg_sel;

	// ! segmant LED Part
    wire count_down;

	reg [7:0] seg_led;
    	reg [5:0] seg_sel;

    i_seg_led u_seg_led (
        .sys_clk(clk_out50m),
        .sys_rst_n(rst_n),
        .count_down(count_down),
        .seg_led(seg_led),
        .seg_sel(seg_sel)
    );

    count u_count (
        .sys_clk(clk_out100m),
        .sys_rst_n(rst_n),
        .count_down(count_down)
    );
                                     
endmodule



